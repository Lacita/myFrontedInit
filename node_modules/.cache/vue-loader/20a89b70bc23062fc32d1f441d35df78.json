{"remainingRequest":"D:\\vue3\\vue3_ts_antd\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\vue3\\vue3_ts_antd\\src\\components\\CountTo\\CountTo.vue?vue&type=template&id=05786225&ts=true","dependencies":[{"path":"D:\\vue3\\vue3_ts_antd\\src\\components\\CountTo\\CountTo.vue","mtime":1684139721598},{"path":"D:\\vue3\\vue3_ts_antd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683333998972},{"path":"D:\\vue3\\vue3_ts_antd\\node_modules\\babel-loader\\lib\\index.js","mtime":1684138886229},{"path":"D:\\vue3\\vue3_ts_antd\\node_modules\\ts-loader\\index.js","mtime":1684138890584},{"path":"D:\\vue3\\vue3_ts_antd\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1684138891920},{"path":"D:\\vue3\\vue3_ts_antd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683333998972},{"path":"D:\\vue3\\vue3_ts_antd\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1684138891920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxzcGFuIDpzdHlsZT0ieyBjb2xvciB9Ij4NCiAgICB7eyB2YWx1ZSB9fQ0KICA8L3NwYW4+DQo="},{"version":3,"sources":["D:\\vue3\\vue3_ts_antd\\src\\components\\CountTo\\CountTo.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"D:/vue3/vue3_ts_antd/src/components/CountTo/CountTo.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <span :style=\"{ color }\">\r\n    {{ value }}\r\n  </span>\r\n</template>\r\n<script lang=\"ts\">\r\nimport { defineComponent, ref, computed, watchEffect, unref, onMounted, watch } from 'vue';\r\nimport { useTransition, TransitionPresets } from '@vueuse/core';\r\nimport { isNumber } from '@/utils/is';\r\n\r\nconst props = {\r\n  startVal: { type: Number, default: 0 },\r\n  endVal: { type: Number, default: 2021 },\r\n  duration: { type: Number, default: 1500 },\r\n  autoplay: { type: Boolean, default: true },\r\n  decimals: {\r\n    type: Number,\r\n    default: 0,\r\n    validator(value: number) {\r\n      return value >= 0;\r\n    },\r\n  },\r\n  prefix: { type: String, default: '' },\r\n  suffix: { type: String, default: '' },\r\n  separator: { type: String, default: ',' },\r\n  decimal: { type: String, default: '.' },\r\n  /**\r\n   * font color\r\n   */\r\n  color: { type: String },\r\n  /**\r\n   * Turn on digital animation\r\n   */\r\n  useEasing: { type: Boolean, default: true },\r\n  /**\r\n   * Digital animation\r\n   */\r\n  transition: { type: String, default: 'linear' },\r\n};\r\n\r\nexport default defineComponent({\r\n  name: 'CountTo',\r\n  props,\r\n  emits: ['onStarted', 'onFinished'],\r\n  setup(props, { emit }) {\r\n    const source = ref(props.startVal);\r\n    const disabled = ref(false);\r\n    let outputValue = useTransition(source);\r\n\r\n    const value = computed(() => formatNumber(unref(outputValue)));\r\n\r\n    watchEffect(() => {\r\n      source.value = props.startVal;\r\n    });\r\n\r\n    watch([() => props.startVal, () => props.endVal], () => {\r\n      if (props.autoplay) {\r\n        start();\r\n      }\r\n    });\r\n\r\n    onMounted(() => {\r\n      props.autoplay && start();\r\n    });\r\n\r\n    function start() {\r\n      run();\r\n      source.value = props.endVal;\r\n    }\r\n\r\n    function reset() {\r\n      source.value = props.startVal;\r\n      run();\r\n    }\r\n\r\n    function run() {\r\n      outputValue = useTransition(source, {\r\n        disabled,\r\n        duration: props.duration,\r\n        onFinished: () => emit('onFinished'),\r\n        onStarted: () => emit('onStarted'),\r\n        ...(props.useEasing ? { transition: TransitionPresets[props.transition] } : {}),\r\n      });\r\n    }\r\n\r\n    function formatNumber(num: number | string) {\r\n      if (!num && num !== 0) {\r\n        return '';\r\n      }\r\n      const { decimals, decimal, separator, suffix, prefix } = props;\r\n      num = Number(num).toFixed(decimals);\r\n      num += '';\r\n\r\n      const x = num.split('.');\r\n      let x1 = x[0];\r\n      const x2 = x.length > 1 ? decimal + x[1] : '';\r\n\r\n      const rgx = /(\\d+)(\\d{3})/;\r\n      if (separator && !isNumber(separator)) {\r\n        while (rgx.test(x1)) {\r\n          x1 = x1.replace(rgx, '$1' + separator + '$2');\r\n        }\r\n      }\r\n      return prefix + x1 + x2 + suffix;\r\n    }\r\n\r\n    return { value, start, reset };\r\n  },\r\n});\r\n</script>\r\n"]}]}